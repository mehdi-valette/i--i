// Generated by CoffeeScript 1.8.0
(function() {
  var fw,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fw = (function() {
    function fw() {
      this.getJsCss = __bind(this.getJsCss, this);
      this.getRessource = __bind(this.getRessource, this);
    }

    fw.baseUrl = "/";

    fw.prototype.ressources = {
      "indexCSS": fw.baseUrl + "Ressource/css/index.css",
      "mapAPP": fw.baseUrl + "Component/Map/View/map.html",
      "mapJS": fw.baseUrl + "Ressource/js/map.js",
      "mapCSS": fw.baseUrl + "Ressource/css/map.css",
      "leafletJS": "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js",
      "leafletCSS": "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css",
      "angularJS": "https://ajax.googleapis.com/ajax/libs/angularjs/1.3.10/angular.min.js"
    };

    fw.prototype.getRessource = function(ressourceName) {
      return this.ressources[ressourceName];
    };

    fw.prototype.getJsCss = function(fileNames, doc) {
      var callback, index;
      index = -1;
      callback = (function(_this) {
        return function() {
          var again, file, name;
          index++;
          name = fileNames[index];
          if (name.slice(-3) === "CSS") {
            file = doc.createElement("link");
            file.href = _this.getRessource(name);
            file.rel = "stylesheet";
            file.type = "text/css";
            doc.head.appendChild(file);
          } else if (name.slice(-2) === "JS") {
            file = doc.createElement("script");
            file.src = _this.getRessource(name);
            file.type = "text/javascript";
            doc.body.appendChild(file);
          }
          again = function() {
            if (index < (fileNames.length - 1)) {
              return callback();
            }
          };
          if (file.readyState) {
            return file.onreadystatechange = function() {
              if (file.readyState === "loaded" || file.readyState === "complete") {
                file.onreadystatechange = null;
                return again();
              }
            };
          } else {
            return file.onload = function() {
              return again();
            };
          }
        };
      })(this);
      return callback();
    };

    return fw;

  })();

  window.fw = new fw();

}).call(this);
