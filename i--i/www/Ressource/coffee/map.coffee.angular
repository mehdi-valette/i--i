# --- angular controller
angularApp.controller("mapController", [
	"$scope", "leafletData", ($scope, leafletData) ->

		# - tiles' server used for the map
		tiles =
			mapbox:
				url: "https://{s}.tiles.mapbox.com/v3/{id}/{z}/{x}/{y}.png"
				options:
					attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, ' +
					'<a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
					'Imagery © <a href="http://mapbox.com">Mapbox</a>'
					id: 'examples.map-i875mjb7'

		# - the event layers on which every events will be added
		$scope.eventLayer = L.markerClusterGroup
			spiderfyDistanceMultiplier: 2
			
		# --- events icon's function
		getIcon = (iconName) ->
			iconUrl: fw.getRessource iconName + "IMG"
			iconSize: [46, 46]
			iconAnchor: [23, 23]
			popupAnchor: [0, 0]
			
		# --- events marker's function
		getMarker = (iconName, latitude, longitude, text) ->
			icon: getIcon iconName
			lat: latitude
			lng: longitude
			layer: 'events'
			message: text
			
		# - array of events' markers
		$scope.eventMarkers = []
		
		# - location and message of the user marker
		userMarker =
			icon: 
				iconUrl:  fw.getRessource "userIMG"
				iconSize: [0, 0 ]
			lat: 46.818188
			lng: 8.227512
			message: "Vous êtes ici... à peu près"
			focus: true
				
		# - initial position
		$scope.centerPosition = 
			lat: 46.818188
			lng: 8.227512
			zoom: 8
		
		# --- set map properties
		angular.extend $scope,
			mapboxTiles: tiles.mapbox
			layers:
				baselayers: {}
				overlays:
					events:
						name: "events"
						type: 'markercluster'
						visible: true
						spiderfyDistanceMultiplier: 2
					
		# --- call the geolocalisation system and update the map's center
		navigator.geolocation.getCurrentPosition (pos) ->
			
			# - update the map center's position and zoom
			$scope.centerPosition.lat = pos.coords.latitude
			$scope.centerPosition.lng = pos.coords.longitude
			$scope.centerPosition.zoom = 10
			
			# - update the user's position
			userMarker.lat = pos.coords.latitude
			userMarker.lng = pos.coords.longitude
			$scope.eventMarkers.push userMarker
		
		# --- subscribes to the channel "filterEvents" and listen with the function filterEvents
		filterEvents = (events) ->
			fw.requestServer(
				app: "mapApp"
				controller: "filterEvents"
				callback: (results) ->
					for result in results
						do (result) ->
							lng = result.location.coordinates[0]
							lat = result.location.coordinates[1]
							pictureName = result.category + "_" + result.type
							
							text = ""
							
							for range, i in result.timetables
								do (range, i) ->
									for date, j in range.dates
										if j > 0
											text += ", "
										text += date
										
							text += "<br />" + "<a ui-sref='eventDetail'>" + result.titles[0].text + "</a>"
							
							$scope.eventMarkers.push getMarker(pictureName, lat, lng, text)
				)

		fw.pubsub.subscribe "filterEvents", filterEvents, true


		# - fires the event "filterEvents" and asks to filter events within a radius
		fw.pubsub.publish "filterEvents", {}
	])